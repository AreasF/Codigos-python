using Google.Apis.Auth.OAuth2;
using Google.Apis.Drive.v3;
using Google.Apis.Services;
using Google.Apis.Util.Store;
using System;
using System.IO;
using System.Threading;

namespace NaoPercaPastas
{
    class Program
    {
        static string[] Scopes = { DriveService.Scope.Drive };
        static string ApplicationName = "NaoPercaPastas";

        static void Main(string[] args)
        {
            UserCredential credential;

            using (var stream =
                new FileStream("credentials.json", FileMode.Open, FileAccess.Read))
            {
                string credPath = "token.json";
                credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.Load(stream).Secrets,
                    Scopes,
                    "user",
                    CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;
                Console.WriteLine("Credential file saved to: " + credPath);
            }

            var service = new DriveService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = ApplicationName,
            });

           namespace NaoPercaPastas
    {
        class FolderOrganizer
        {
            public static void OrganizeFolders(string folderPath)
            {
                var directoryInfo = new DirectoryInfo(folderPath);
                var files = directoryInfo.GetFiles();

                foreach (var file in files)
                {
                    string targetFolder = Path.Combine(folderPath, file.Extension.TrimStart('.'));
                    Directory.CreateDirectory(targetFolder);
                    string targetPath = Path.Combine(targetFolder, file.Name);

                    if (!File.Exists(targetPath))
                    {
                        File.Move(file.FullName, targetPath);
                    }
                }
            }
        }
    }
}
class Program
{
    static void Main(string[] args)
    {
        // Instanciar GoogleDriveBackup
        var backupManager = new GoogleDriveBackup(service);

        // Configurar Quartz.NET para agendar backups
        IScheduler scheduler = StdSchedulerFactory.GetDefaultScheduler().Result;
        scheduler.Start().Wait();

        IJobDetail job = JobBuilder.Create<BackupJob>()
            .WithIdentity("backupJob", "group1")
            .UsingJobData("folderPath", "C:\\path\\to\\folder")
            .Build();

        ITrigger trigger = TriggerBuilder.Create()
            .WithIdentity("backupTrigger", "group1")
            .StartNow()
            .WithSimpleSchedule(x => x
                .WithIntervalInHours(24)
                .RepeatForever())
            .Build();

        scheduler.ScheduleJob(job, trigger).Wait();

        Console.WriteLine("Backup scheduler started. Press any key to exit.");
        Console.ReadKey();
    }
}

public class BackupJob : IJob
{
    public Task Execute(IJobExecutionContext context)
    {
        var folderPath = context.JobDetail.JobDataMap.GetString("folderPath");
        var driveService = // instanciar DriveService aqui

        var backupManager = new GoogleDriveBackup(driveService);
        backupManager.BackupFolder(folderPath);

        return Task.CompletedTask;
    }
}
class FolderOrganizer
{
    public static void OrganizeFolders(string folderPath)
    {
        var directoryInfo = new DirectoryInfo(folderPath);
        var files = directoryInfo.GetFiles();

        foreach (var file in files)
        {
            string targetFolder = Path.Combine(folderPath, file.Extension.TrimStart('.'));
            Directory.CreateDirectory(targetFolder);
            string targetPath = Path.Combine(targetFolder, file.Name);

            if (!File.Exists(targetPath))
            {
                File.Move(file.FullName, targetPath);
            }
        }
    }
}
class GoogleDriveBackup
    {
        private readonly DriveService _service;

        public GoogleDriveBackup(DriveService service)
        {
            _service = service;
        }

        public void BackupFolder(string folderPath)
        {
            var directoryInfo = new DirectoryInfo(folderPath);
            var files = directoryInfo.GetFiles();

            foreach (var file in files)
            {
                var fileMetadata = new Google.Apis.Drive.v3.Data.File()
                {
                    Name = file.Name,
                    Parents = new List<string> { "appDataFolder" } // Modificar conforme pasta destino
                };

                FilesResource.CreateMediaUpload request;
                using (var stream = new FileStream(file.FullName, FileMode.Open))
                {
                    request = _service.Files.Create(fileMetadata, stream, GetMimeType(file.FullName));
                    request.Fields = "id";
                    request.Upload();
                }

                var fileId = request.ResponseBody.Id;
                Console.WriteLine("File ID: " + fileId);
            }
        }

        private string GetMimeType(string fileName)
        {
            string mimeType = "application/unknown";
            string ext = Path.GetExtension(fileName).ToLower();
            Microsoft.Win32.RegistryKey regKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(ext);
            if (regKey != null && regKey.GetValue("Content Type") != null)
                mimeType = regKey.GetValue("Content Type").ToString();
            return mimeType;
        }
    }
}
